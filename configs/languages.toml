[language-server.copilot]
command = "copilot"
args = ["--stdio"]

[language-server.typescript]
command = "typescript-language-server"
args = ["--stdio"]

[language-server.typescript.config]
typescript.tsserver.experimental.enableProjectDiagnostics = true

[language-server.tsx.config]
typescript.tsserver.experimental.enableProjectDiagnostics = true

[language-server.tsx]
command = "typescript-language-server"
args = ["--stdio"]

[language-server.emmet-ls]
command="emmet-ls"
args = ["--stdio"]

[language-server.efm]
command = "efm-langserver"

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.biome]
command = "biome"
args = ["lsp-proxy", "--config-path", "biome.json"]

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.eslint.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = ""

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.workingDirectory]
mode = "location"

[[language]]
name = "typescript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
file-types = ["ts"]
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "copilot" },
  { name = "eslint", except-features = [ "format" ] },
  { name = "emmet-ls" },
]

[[language]]
name = "tsx"
formatter = { command = "prettier", args = ["--stdin-filepath", "file.tsx"] }
file-types=["tsx"]
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "copilot" },
  { name = "eslint", except-features = [ "format" ] },
  { name = "emmet-ls" },
]

[[language]]
name = "haskell"
file-types=["hs"]
language-servers = [
  { name = "haskell-language-server" },
  { name = "copilot" },
]

[[language]]
name = "json"
formatter = { command = "prettier", args = [ "--parser", "json" ] }

[[language]]
name = "yaml"
formatter = { command = "prettier", args = [ "--parser", "yaml" ] }
language-servers = ["yaml-language-server", "copilot"]

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server", "emmet-ls" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "emmet-ls", "copilot" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }

[[language]]
name = "cpp"
language-servers = [ "clangd", "copilot" ]

[[language]]
name = "svelte"
language-servers = [ "svelteserver", "copilot" ]

[[language]]
name = "rust"
language-servers = [ "rust-analyzer", "copilot" ]

[[language]]
name = "toml"
language-servers = [ "taplo", "copilot" ]

[[language]]
name = "go"
language-servers = [ "gopls", "copilot" ]

